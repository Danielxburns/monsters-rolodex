{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","utils/data.utils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["Card","_ref","monster","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","placeholder","onChangeHandler","type","onChange","getData","Object","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","searchField","setSearchField","_useState3","_useState4","setMonsters","_useState5","_useState6","filteredMonsters","setFilteredMonsters","useEffect","users","fetchUsers","newFilteredMonsters","filter","toLocaleLowerCase","includes","search_box_component_SearchBox","e","searchFieldString","target","value","card_list_component_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b1817d25.chunk.js","sourcesContent":["import React from 'react';\nimport { Monster } from '../../App';\nimport './card.styles.css';\n\ntype CardProps = {\n  monster: Monster;\n};\n\nexport const Card = ({ monster }: CardProps) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"monster\"\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n    ></img>\n    <h2> {monster.name} </h2>\n    <p> {monster.email} </p>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport { Monster } from '../../App';\n\nimport './card-list.styles.css';\n\ntype CardListProps = {\n  monsters: Monster[];\n};\n\nexport const CardList = ({ monsters }: CardListProps) => (\n  <div className=\"card-list\">\n    {monsters.map((monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React, { ChangeEvent } from \"react\";\nimport './search-box.styles.css';\n\ntype SearchBoxProps = {\n  className: string;\n  placeholder: string;\n  onChangeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBox = ( { className, placeholder, onChangeHandler }: SearchBoxProps) => (\n  <input\n    className={`search-box ${className}`} \n    type='search' \n    placeholder={ placeholder } \n    onChange={ onChangeHandler } \n  />\n);\n","export const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  return response.json();\n};\n","import { useState, useEffect, ChangeEvent } from 'react';\nimport React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport { getData } from './utils/data.utils';\n\nimport './App.css';\n\nexport type Monster = {\n  id: string;\n  name: string;\n  email: string;\n};\n\nconst App = () => {\n  const [searchField, setSearchField] = useState('');\n  const [monsters, setMonsters] = useState<Monster[]>([]);\n  const [filteredMonsters, setFilteredMonsters] = useState(monsters);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users = await getData<Monster[]>(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      setMonsters(users);\n    };\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    const newFilteredMonsters = monsters.filter((monster) =>\n      monster.name.toLocaleLowerCase().includes(searchField)\n    );\n    setFilteredMonsters(newFilteredMonsters);\n  }, [monsters, searchField]);\n\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const searchFieldString = e.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app.title\">Monsters Rolodex</h1>\n      <SearchBox\n        className=\"search\"\n        placeholder=\"Search monsters\"\n        onChangeHandler={onSearchChange}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: ''\n//     };\n//   }\n//   componentDidMount() {\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(res => res.json())\n//     .then(users => this.setState({monsters: users}));\n//   }\n\n//   handleChange = (e) => {\n//     this.setState({ searchField: e.target.value })\n//   };\n\n//   render() {\n//       const { monsters, searchField } = this.state;\n//       const filteredMonsters = monsters.filter(monster =>\n//         monster.name.toLowerCase().includes(searchField.toLowerCase()));\n//       return (\n//         <div className=\"App\">\n//         <h1> Monsters Rolodex </h1>\n//         <CardList monsters={filteredMonsters}/>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function \n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}